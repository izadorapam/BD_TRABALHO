-- FUNÇÕES DE CADASTRO
DROP FUNCTION IF EXISTS CADASTRAR_CLIENTE( P_ID INT,P_NOME VARCHAR,P_ENDERECO VARCHAR,P_TELEFONE VARCHAR,P_EMAIL VARCHAR)

CREATE OR REPLACE FUNCTION CADASTRAR_CLIENTE(
    P_ID INT,
    P_NOME VARCHAR,
    P_ENDERECO VARCHAR,
    P_TELEFONE VARCHAR,
    P_EMAIL VARCHAR
) RETURNS TEXT AS $$
BEGIN
    -- Verifica se o cliente já existe
    IF EXISTS (SELECT 1 FROM CLIENTE WHERE ID_CLIENTE = P_ID) THEN
        RETURN 'Erro: ID de cliente já existe.';
    END IF;
    
    IF P_EMAIL NOT LIKE '%@%.%' THEN
        RETURN 'Erro: Formato de email inválido.';
    END IF;
    
    INSERT INTO CLIENTE VALUES (P_ID, P_NOME, P_ENDERECO, P_TELEFONE, P_EMAIL);
    
    RETURN 'Cliente cadastrado com sucesso. ID: ' || P_ID;
    
EXCEPTION WHEN OTHERS THEN
    RETURN 'Erro ao cadastrar cliente: ' || SQLERRM;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION CADASTRAR_FUNCIONARIO(
    P_ID INT,
    P_NOME VARCHAR,
    P_TELEFONE VARCHAR,
    P_EMAIL VARCHAR,
    P_CARGO VARCHAR
) RETURNS VOID AS $$
BEGIN
    INSERT INTO FUNCIONARIO VALUES (P_ID, P_NOME, P_TELEFONE, P_EMAIL, P_CARGO);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION CADASTRAR_FORNECEDOR(
    P_ID INT,
    P_NOME VARCHAR,
    P_TELEFONE VARCHAR,
    P_EMAIL VARCHAR
) RETURNS VOID AS $$
BEGIN
    INSERT INTO FORNECEDOR VALUES (P_ID, P_NOME, P_TELEFONE, P_EMAIL);
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION CADASTRAR_PRODUTO(
    P_ID INT,
    P_ESTOQUE INT,
    P_NOME VARCHAR,
    P_PRECO DECIMAL,
    P_TIPO VARCHAR,
    P_COMPOE INT
) RETURNS VOID AS $$
BEGIN
    INSERT INTO PRODUTO VALUES (P_ID, P_ESTOQUE, P_NOME, P_PRECO, P_TIPO, P_COMPOE);
END;
$$ LANGUAGE PLPGSQL;

-- FUNÇÕES DE ALTERAÇÃO

CREATE OR REPLACE FUNCTION ATUALIZAR_ESTOQUE(
    P_ID INT,
    P_QUANTIDADE INT
) RETURNS VOID AS $$
BEGIN
    UPDATE PRODUTO SET ESTOQUE = P_QUANTIDADE WHERE ID_PRODUTO = P_ID;
END;
$$ LANGUAGE PLPGSQL;

-- FUNÇÕES DE REMOÇÃO

CREATE OR REPLACE FUNCTION REMOVER_CLIENTE(P_ID INT) RETURNS VOID AS $$
BEGIN
    DELETE FROM CLIENTE WHERE ID_CLIENTE = P_ID;
END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION REMOVER_PRODUTO(P_ID INT) RETURNS VOID AS $$
BEGIN
    DELETE FROM PRODUTO WHERE ID_PRODUTO = P_ID;
END;
$$ LANGUAGE PLPGSQL;

-- TRIGGERS DE MOVIMENTAÇÃO DE ESTOQUE

CREATE OR REPLACE FUNCTION ATUALIZAR_ESTOQUE_COMPRA() RETURNS TRIGGER AS $$
BEGIN
    UPDATE PRODUTO SET ESTOQUE = ESTOQUE + NEW.QUANT WHERE ID_PRODUTO = NEW.ID_PRODUTO;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TRG_ESTOQUE_COMPRA
AFTER INSERT ON ITEM_COMPRA
FOR EACH ROW
EXECUTE FUNCTION ATUALIZAR_ESTOQUE_COMPRA();

CREATE OR REPLACE FUNCTION ATUALIZAR_ESTOQUE_PEDIDO() RETURNS TRIGGER AS $$
BEGIN
    IF (SELECT ESTOQUE FROM PRODUTO WHERE ID_PRODUTO = NEW.ID_PRODUTO) < NEW.QUANT THEN
        RAISE EXCEPTION 'ESTOQUE INSUFICIENTE PARA O PRODUTO %', NEW.ID_PRODUTO;
    END IF;
    UPDATE PRODUTO SET ESTOQUE = ESTOQUE - NEW.QUANT WHERE ID_PRODUTO = NEW.ID_PRODUTO;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER TRG_ESTOQUE_PEDIDO
BEFORE INSERT ON ITEM_PEDIDO
FOR EACH ROW
EXECUTE FUNCTION ATUALIZAR_ESTOQUE_PEDIDO();

-- FUNÇÃO PARA REGISTRAR PEDIDO 

CREATE OR REPLACE FUNCTION REGISTRAR_PEDIDO(
    P_ID_PEDIDO INT,
    P_ID_CLIENTE INT,
    P_TELEFONE VARCHAR,
    P_ID_FUNCIONARIO INT,
    P_ID_PRODUTO1 INT,
    P_QUANT1 INT,
    P_VALOR1 DECIMAL,
    P_ID_PRODUTO2 INT DEFAULT NULL,
    P_QUANT2 INT DEFAULT NULL,
    P_VALOR2 DECIMAL DEFAULT NULL
) RETURNS VOID AS $$
BEGIN
    INSERT INTO PEDIDO VALUES (P_ID_PEDIDO, P_ID_CLIENTE, P_TELEFONE, 0, P_ID_FUNCIONARIO);

    INSERT INTO ITEM_PEDIDO(ID_PEDIDO, ID_PRODUTO, QUANT, VALOR_UNITARIO)
    VALUES (P_ID_PEDIDO, P_ID_PRODUTO1, P_QUANT1, P_VALOR1);

    IF P_ID_PRODUTO2 IS NOT NULL THEN
        INSERT INTO ITEM_PEDIDO(ID_PEDIDO, ID_PRODUTO, QUANT, VALOR_UNITARIO)
        VALUES (P_ID_PEDIDO, P_ID_PRODUTO2, P_QUANT2, P_VALOR2);
    END IF;
END;
$$ LANGUAGE PLPGSQL;

-- FUNÇÃO PARA REGISTRAR COMPRA

CREATE OR REPLACE FUNCTION REGISTRAR_COMPRA(
    P_ID_COMPRA INT,
    P_ID_FORNECEDOR INT,
    P_DATA DATE,
    P_ID_FUNCIONARIO INT,
    P_ID_PRODUTO1 INT,
    P_QUANT1 INT,
    P_VALOR1 DECIMAL,
    P_ID_PRODUTO2 INT DEFAULT NULL,
    P_QUANT2 INT DEFAULT NULL,
    P_VALOR2 DECIMAL DEFAULT NULL
) RETURNS VOID AS $$
BEGIN
    INSERT INTO COMPRA VALUES (P_ID_COMPRA, P_ID_FORNECEDOR, P_DATA, 0, P_ID_FUNCIONARIO);

    INSERT INTO ITEM_COMPRA(ID_COMPRA, ID_PRODUTO, QUANT, VALOR_UNITARIO)
    VALUES (P_ID_COMPRA, P_ID_PRODUTO1, P_QUANT1, P_VALOR1);

    IF P_ID_PRODUTO2 IS NOT NULL THEN
        INSERT INTO ITEM_COMPRA(ID_COMPRA, ID_PRODUTO, QUANT, VALOR_UNITARIO)
        VALUES (P_ID_COMPRA, P_ID_PRODUTO2, P_QUANT2, P_VALOR2);
    END IF;
END;
$$ LANGUAGE PLPGSQL;
